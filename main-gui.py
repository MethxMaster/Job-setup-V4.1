# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QApplication, QDialog, QMessageBox
from PyQt5.uic import loadUi
import loading_xml
import reading_xml
import handling_file
import analyzing_data
import write_excel
import write_form
import datetime
import logging
import function_support as ex_func
import os
import shutil
import time



current_time = datetime.datetime.now()
default_directory_str = ex_func.default_directory(os.getcwd())
output_folder_str = default_directory_str + '\\Output'

global get_xml
get_xml = False

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1139, 579)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setMouseTracking(False)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.MainWindow_frame = QtWidgets.QFrame(self.centralwidget)
        self.MainWindow_frame.setGeometry(QtCore.QRect(0, 0, 1131, 551))
        self.MainWindow_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainWindow_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainWindow_frame.setObjectName("MainWindow_frame")
        self.DateInfo_groupBox = QtWidgets.QGroupBox(self.MainWindow_frame)
        self.DateInfo_groupBox.setGeometry(QtCore.QRect(10, 10, 491, 291))
        self.DateInfo_groupBox.setObjectName("DateInfo_groupBox")
        self.Calendar_DateInfo_calendarWidget = QtWidgets.QCalendarWidget(self.DateInfo_groupBox)
        self.Calendar_DateInfo_calendarWidget.setGeometry(QtCore.QRect(30, 50, 431, 191))
        self.Calendar_DateInfo_calendarWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.Calendar_DateInfo_calendarWidget.setSelectedDate(QtCore.QDate(int(current_time.strftime("%Y")), int(current_time.strftime("%m")), int(current_time.strftime("%d"))))
        self.Calendar_DateInfo_calendarWidget.setSelectionMode(QtWidgets.QCalendarWidget.SingleSelection)
        self.Calendar_DateInfo_calendarWidget.setHorizontalHeaderFormat(QtWidgets.QCalendarWidget.ShortDayNames)
        self.Calendar_DateInfo_calendarWidget.setVerticalHeaderFormat(QtWidgets.QCalendarWidget.ISOWeekNumbers)
        self.Calendar_DateInfo_calendarWidget.setObjectName("Calendar_DateInfo_calendarWidget")
        self.Inform_DateInfo_label = QtWidgets.QLabel(self.DateInfo_groupBox)
        self.Inform_DateInfo_label.setGeometry(QtCore.QRect(20, 20, 441, 16))
        self.Inform_DateInfo_label.setObjectName("Inform_DateInfo_label")
        self.layoutWidget = QtWidgets.QWidget(self.DateInfo_groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 260, 201, 16))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.SelectedDate_DateInfo_label = QtWidgets.QLabel(self.layoutWidget)
        self.SelectedDate_DateInfo_label.setObjectName("SelectedDate_DateInfo_label")
        self.horizontalLayout.addWidget(self.SelectedDate_DateInfo_label)
        self.GetDate_DateInfo_label = QtWidgets.QLabel(self.layoutWidget)
        self.GetDate_DateInfo_label.setObjectName("GetDate_DateInfo_label")
        self.horizontalLayout.addWidget(self.GetDate_DateInfo_label)
        self.Execute_pushButton = QtWidgets.QPushButton(self.MainWindow_frame)
        self.Execute_pushButton.setEnabled(True)
        self.Execute_pushButton.setGeometry(QtCore.QRect(510, 490, 621, 41))
        self.Execute_pushButton.setObjectName("Execute_pushButton")
        self.OutputLocation_GroupBox = QtWidgets.QGroupBox(self.MainWindow_frame)
        self.OutputLocation_GroupBox.setGeometry(QtCore.QRect(10, 310, 491, 111))
        self.OutputLocation_GroupBox.setObjectName("OutputLocation_GroupBox")
        self.layoutWidget1 = QtWidgets.QWidget(self.OutputLocation_GroupBox)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 30, 461, 25))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.OutputDirectory_OutputLocation_lineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.OutputDirectory_OutputLocation_lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.OutputDirectory_OutputLocation_lineEdit.setText(default_directory_str + '\\Output\\' + current_time.strftime("%Y-%m-%d"))
        self.OutputDirectory_OutputLocation_lineEdit.setObjectName("OutputDirectory_OutputLocation_lineEdit")
        self.horizontalLayout_2.addWidget(self.OutputDirectory_OutputLocation_lineEdit)
        self.Browse_GroupButton_pushButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.Browse_GroupButton_pushButton.setObjectName("Browse_GroupButton_pushButton")
        self.horizontalLayout_2.addWidget(self.Browse_GroupButton_pushButton)
        self.layoutWidget2 = QtWidgets.QWidget(self.OutputLocation_GroupBox)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 60, 465, 34))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.InformationLine1_Information_label = QtWidgets.QLabel(self.layoutWidget2)
        self.InformationLine1_Information_label.setObjectName("InformationLine1_Information_label")
        self.verticalLayout.addWidget(self.InformationLine1_Information_label)
        self.InformationLine2_Information_label = QtWidgets.QLabel(self.layoutWidget2)
        self.InformationLine2_Information_label.setObjectName("InformationLine2_Information_label")
        self.verticalLayout.addWidget(self.InformationLine2_Information_label)
        self.RunningInfo_groupBox = QtWidgets.QGroupBox(self.MainWindow_frame)
        self.RunningInfo_groupBox.setGeometry(QtCore.QRect(510, 10, 621, 471))
        self.RunningInfo_groupBox.setObjectName("RunningInfo_groupBox")
        self.Monitor_RunningInfo_plainTextEdit = QtWidgets.QPlainTextEdit(self.RunningInfo_groupBox)
        self.Monitor_RunningInfo_plainTextEdit.setGeometry(QtCore.QRect(10, 20, 601, 411))
        self.Monitor_RunningInfo_plainTextEdit.setObjectName("Monitor_RunningInfo_plainTextEdit")
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText('---------------------------------------------------------------- Running status ' \
                                                               '----------------------------------------------------------------\n\n')
        self.progressBar_RunningInfo_progressBar = QtWidgets.QProgressBar(self.RunningInfo_groupBox)
        self.progressBar_RunningInfo_progressBar.setGeometry(QtCore.QRect(10, 440, 601, 23))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 0)
        self.progressBar_RunningInfo_progressBar.setObjectName("progressBar_RunningInfo_progressBar")
        self.InputXMLLocation_GroupBox = QtWidgets.QGroupBox(self.MainWindow_frame)
        self.InputXMLLocation_GroupBox.setGeometry(QtCore.QRect(10, 430, 491, 101))
        self.InputXMLLocation_GroupBox.setObjectName("InputXMLLocation_GroupBox")
        self.layoutWidget_4 = QtWidgets.QWidget(self.InputXMLLocation_GroupBox)
        self.layoutWidget_4.setGeometry(QtCore.QRect(20, 30, 461, 25))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3 = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setText(default_directory_str + '\\Input XML')
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setObjectName("InputXMLDirectory_InputXMLLocation_lineEdit_3")
        self.horizontalLayout_4.addWidget(self.InputXMLDirectory_InputXMLLocation_lineEdit_3)
        self.Browse_GroupButton_pushButton_3 = QtWidgets.QPushButton(self.layoutWidget_4)
        self.Browse_GroupButton_pushButton_3.setObjectName("Browse_GroupButton_pushButton_3")
        self.horizontalLayout_4.addWidget(self.Browse_GroupButton_pushButton_3)
        self.layoutWidget_5 = QtWidgets.QWidget(self.InputXMLLocation_GroupBox)
        self.layoutWidget_5.setGeometry(QtCore.QRect(20, 60, 465, 31))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget_5)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.InformationLine1_Information_label_3 = QtWidgets.QLabel(self.layoutWidget_5)
        self.InformationLine1_Information_label_3.setObjectName("InformationLine1_Information_label_3")
        self.verticalLayout_3.addWidget(self.InformationLine1_Information_label_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1139, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Calendar_DateInfo_calendarWidget.selectionChanged.connect(self.selected_date)
        self.Browse_GroupButton_pushButton.clicked.connect(self.get_directory)
        self.Browse_GroupButton_pushButton_3.clicked.connect(self.get_XML)
        self.Execute_pushButton.clicked.connect(self.execution)

        self.Calendar_DateInfo_calendarWidget.setEnabled(True)
        self.OutputDirectory_OutputLocation_lineEdit.setEnabled(True)
        self.Browse_GroupButton_pushButton.setEnabled(True)
        self.Execute_pushButton.setEnabled(True)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setEnabled(True)
        self.Browse_GroupButton_pushButton_3.setEnabled(True)


        str_monitor = current_time.strftime("%d %B %Y") + ' has selected'
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        str_monitor = 'Save output to  - ' + self.OutputDirectory_OutputLocation_lineEdit.text()
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Automate Job-setup"))
        self.DateInfo_groupBox.setTitle(_translate("MainWindow", "Date information"))
        self.Inform_DateInfo_label.setText(_translate("MainWindow", "Select date to create job-setup"))
        self.SelectedDate_DateInfo_label.setText(_translate("MainWindow", "Selected date : "))
        self.GetDate_DateInfo_label.setText(_translate("MainWindow", current_time.strftime("%d %B %Y")))
        self.Execute_pushButton.setText(_translate("MainWindow", "EXECUTE"))
        self.OutputLocation_GroupBox.setTitle(_translate("MainWindow", "Output location"))
        self.Browse_GroupButton_pushButton.setText(_translate("MainWindow", "Browse..."))
        self.InformationLine1_Information_label.setText(_translate("MainWindow", "Choose output location. If new output location is not selected the system will save output file to "))
        self.InformationLine2_Information_label.setText(_translate("MainWindow", "default folder."))
        self.RunningInfo_groupBox.setTitle(_translate("MainWindow", "Running information"))
        self.InputXMLLocation_GroupBox.setTitle(_translate("MainWindow", "Input location"))
        self.Browse_GroupButton_pushButton_3.setText(_translate("MainWindow", "Browse..."))
        self.InformationLine1_Information_label_3.setText(_translate("MainWindow", "Choose input XML file for analyze"))




        
    def selected_date(self):
        date_selected = self.Calendar_DateInfo_calendarWidget.selectedDate()
        date_in_string = date_selected.toPyDate()

        self.GetDate_DateInfo_label.setText(date_in_string.strftime("%d %B %Y"))
        output_folder_str_selected = output_folder_str + '\\' + date_in_string.strftime("%Y-%m-%d")

        self.OutputDirectory_OutputLocation_lineEdit.setText(output_folder_str_selected)

        str_monitor = date_in_string.strftime("%d %B %Y") + ' has selected'
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        str_monitor = 'Save output to  - ' + output_folder_str_selected
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))

        self.Calendar_DateInfo_calendarWidget.setEnabled(False)
        self.OutputDirectory_OutputLocation_lineEdit.setEnabled(True)
        self.Browse_GroupButton_pushButton.setEnabled(True)
        self.Execute_pushButton.setEnabled(True)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setEnabled(True)
        self.Browse_GroupButton_pushButton_3.setEnabled(True)

    def get_directory(self):
        response = QFileDialog.getExistingDirectory()
        self.OutputDirectory_OutputLocation_lineEdit.setText(response)

        str_monitor = 'Save output to  - ' + response
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))


        self.Calendar_DateInfo_calendarWidget.setEnabled(False)
        self.OutputDirectory_OutputLocation_lineEdit.setEnabled(False)
        self.Browse_GroupButton_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(True)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setEnabled(True)
        self.Browse_GroupButton_pushButton_3.setEnabled(True)

    def get_XML(self):
        response , _ = QFileDialog.getOpenFileName(None, 'Open file', default_directory_str + '\\Input XML', 'XML files (*.xml)')
        type(response)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setText(response)

        str_monitor = 'Selected XML from  - ' + response
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))

        if response != '' :
            global get_xml
            get_xml = True

        self.Calendar_DateInfo_calendarWidget.setEnabled(False)
        self.OutputDirectory_OutputLocation_lineEdit.setEnabled(False)
        self.Browse_GroupButton_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(True)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setEnabled(False)
        self.Browse_GroupButton_pushButton_3.setEnabled(False)


    def notification_gui(text_input):
        str_monitor = text_input
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))


    def error_no_xml(self):
        msg = QMessageBox()
        msg.setWindowTitle('Error - XML is missing!')
        msg.setText('Please input correct XML file from MES.')
        msg.setIcon(QMessageBox.Warning)
        x = msg.exec_()

    def execution(self):

        while get_xml == False :
            self.error_no_xml()
            return None


        self.Calendar_DateInfo_calendarWidget.setEnabled(False)
        self.OutputDirectory_OutputLocation_lineEdit.setEnabled(False)
        self.Browse_GroupButton_pushButton.setEnabled(False)
        self.Execute_pushButton.setEnabled(False)
        self.InputXMLDirectory_InputXMLLocation_lineEdit_3.setEnabled(False)
        self.Browse_GroupButton_pushButton_3.setEnabled(False)

        #ex_func.update_progress(self)

        str_monitor = 'Started execution'


        date_selected = self.Calendar_DateInfo_calendarWidget.selectedDate()
        date_string = date_selected.toPyDate()


        #Check folder and create folder
        check_directory = self.OutputDirectory_OutputLocation_lineEdit.text()  #Directory output path
 
        try :
            os.listdir(check_directory)     #Check directory
            created_folder  = False

        except FileNotFoundError :
            os.mkdir(check_directory)       #Create directory
            str_monitor = 'Created folder - ' + check_directory
            self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))

            created_folder  = True
        self.progressBar_RunningInfo_progressBar.setProperty("value", 0)

        # Logging -------------------------------------------------------------------------
        all_file_name = date_string.strftime('%Y%m%d') + '-' + current_time.strftime('%H%M%S')
        log_name = 'log-' + all_file_name + '.log'
        logging.basicConfig(filename=check_directory + '/' + log_name,level=logging.INFO, format='%(asctime)s - %(levelname)s ->    %(message)s')
        logging.basicConfig(filename=check_directory + '/' + log_name,level=logging.WARNING, format='%(asctime)s - %(levelname)s -> %(message)s')
        
        log_text = 'Main - Set logging information'
        ex_func.notification(log_text)
        logging.info(log_text)
        self.progressBar_RunningInfo_progressBar.setProperty("value", 0)
        # ---------------------------------------------------------------------------------

        if created_folder == True :
            log_text = 'folder location : ' + default_directory_str + '/' + str(check_directory) + ' was created'
            ex_func.notification(log_text)


        #if __name__ == '__main__':

        #loading_xml.loading_xml_fx(self,date_string)
        #str_monitor = 'XML has been loaded'
        #self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))


        
        xml_file = handling_file.handling_file_V4(all_file_name,self.InputXMLDirectory_InputXMLLocation_lineEdit_3.text(),check_directory)
        str_monitor = 'XML has been moved to ' + check_directory
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 20)

        #xml_file = 'MBMW-20210825-181612.xml'
        #date_string = datetime.datetime(2021, 8, 25)
        xml_data = reading_xml.reading_xml(self,all_file_name,check_directory)
        str_monitor = 'XML is being analyzed'
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 40)

        first_batt = analyzing_data.analyzing_data(xml_data)
        str_monitor = 'Analyzing process is done'
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 60)

        write_excel.create_excel(first_batt,all_file_name,check_directory)
        str_monitor = 'excel (output) has been created to ' + check_directory
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 80)

        write_form.write_from(first_batt,all_file_name,check_directory,date_string,default_directory_str)
        str_monitor = 'excel (output form) has been created to ' + check_directory
        self.Monitor_RunningInfo_plainTextEdit.insertPlainText(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S | ' + str_monitor + '\n'))
        self.progressBar_RunningInfo_progressBar.setProperty("value", 99)

        log_text = 'Main - finished'
        ex_func.notification(log_text)
        self.progressBar_RunningInfo_progressBar.setProperty("value", 100)


import sys
app = QtWidgets.QApplication(sys.argv)
MainWindow = QtWidgets.QMainWindow()
ui = Ui_MainWindow()
ui.setupUi(MainWindow)
MainWindow.show()
sys.exit(app.exec_())
